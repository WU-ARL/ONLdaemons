# MAH: source http://www.mjmwired.net/kernel/Documentation/networking/ixgb.txt
# some of the defaults may be different for your kernel
# call this file with sysctl -p <this file>
# these are just suggested values that worked well to increase throughput in
# several network benchmark tests, your mileage may vary

# This link explains what all the values mean:
# http://www.cyberciti.biz/files/linux-kernel/Documentation/networking/ip-sysctl.txt

### IPV4 specific settings
# turn TCP timestamp support off, default 1, reduces CPU use
net.ipv4.tcp_timestamps = 0
# turn SACK support off, default on
# on systems with a VERY fast bus -> memory interface this is the big gainer
net.ipv4.tcp_sack = 0
# set min/default/max TCP read buffer, default 4096 87380 174760
net.ipv4.tcp_rmem = 10000000 10000000 10000000
# set min/pressure/max TCP write buffer, default 4096 16384 131072
net.ipv4.tcp_wmem = 10000000 10000000 10000000
# set min/pressure/max TCP buffer space, default 31744 32256 32768
net.ipv4.tcp_mem = 10000000 10000000 10000000

### CORE settings (mostly for socket and UDP effect)
# set maximum receive socket buffer size, default 131071
net.core.rmem_max = 2097152
# set maximum send socket buffer size, default 131071
net.core.wmem_max = 524287
# set default receive socket buffer size, default 65535
#net.core.rmem_default = 524287
net.core.rmem_default = 2097152
# set default send socket buffer size, default 65535
net.core.wmem_default = 524287
# set maximum amount of option memory buffers, default 10240
net.core.optmem_max = 524287
# set number of unprocessed input packets before kernel starts dropping them; default 300
net.core.netdev_max_backlog = 300000
net.core.netdev_budget = 1200


#net.ipv4.udp_rmem_min = 131072
net.ipv4.udp_rmem_min = 131072
#net.ipv4.udp_wmem_min = 131072
net.ipv4.udp_wmem_min = 131072


# Resolving Slow UDP Traffic
# --------------------------
# If your server does not seem to be able to receive UDP traffic as fast as it
# can receive TCP traffic, it could be because Linux, by default, does not set
# the network stack buffers as large as they need to be to support high UDP
# transfer rates.  One way to alleviate this problem is to allow more memory to
# be used by the IP stack to store incoming data.

# For instance, use the commands:
#sysctl -w net.core.rmem_max=262143
# and
#sysctl -w net.core.rmem_default=262143
# to increase the read buffer memory max and default to 262143 (256k - 1) from
# defaults of max=131071 (128k - 1) and default=65535 (64k - 1).  These variables
# will increase the amount of memory used by the network stack for receives, and
# can be increased significantly more if necessary for your application.
#
#

# XXX don't work...
#net.bridge.bridge-nf-call-arptables = 0
#net.bridge.bridge-nf-call-iptables = 0
#net.bridge.bridge-nf-call-ip6tables = 0
#net.bridge.bridge-nf-filter-vlan-tagged = 0
#net.bridge.bridge-nf-filter-pppoe-tagged = 0

#net.core.rcvbuf_policy = 1
#net.core.sndbuf_policy = 1

# default 64
net.core.dev_weight = 128
# default 10
net.unix.max_dgram_qlen = 1000

