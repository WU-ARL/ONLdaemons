/*
 * $Source: /project/arl/arlcvs/cvsroot/wu_arl/wusrc/wuPP/error.h,v $
 * $Author: fredk $
 * $Date: 2008/02/11 16:41:01 $
 * $Revision: 1.14 $
 * $Name:  $
 *
 * File:   error.h
 * Author: Fred Kuhns
 * Email:  fredk@cse.wustl.edu
 * Organization: Washington University in St. Louis
 * 
 * Created:  04/07/06 15:08:11 CDT
 * 
 * Description:  
 */

#ifndef _WUPP_ERROR_H
#define _WUPP_ERROR_H

#include <iostream>
#include <exception>
#include <cstring>
#include <errno.h>
#include <sstream>
#include <wulib/wulog.h>
#include <wulib/net_util.h>

  // Pick up wun_errType_t
namespace wupp {

  typedef wun_errLevel_t errLevel;
  typedef wun_errType_t   errType;
  typedef wun_errInfo_t   errInfo;

  const makeNetTypeName(errType) NoError_Start = makeNetErrName(NoError_Start);
  const makeNetTypeName(errType) noError       = makeNetErrName(noError);
  const makeNetTypeName(errType) dataSuccess   = makeNetErrName(dataSuccess);
  const makeNetTypeName(errType) dataPartial   = makeNetErrName(dataPartial);
  const makeNetTypeName(errType) dataComplete  = makeNetErrName(dataComplete);
  const makeNetTypeName(errType) dataNone      = makeNetErrName(dataNone);
  const makeNetTypeName(errType) inProgress    = makeNetErrName(inProgress);
  const makeNetTypeName(errType) EndOfFile     = makeNetErrName(EndOfFile);
  const makeNetTypeName(errType) NoError_End   = makeNetErrName(NoError_End);
  const makeNetTypeName(errType) Error_Start   = makeNetErrName(Error_Start);
  const makeNetTypeName(errType) connFailure   = makeNetErrName(connFailure);
  const makeNetTypeName(errType) intrSysCall   = makeNetErrName(intrSysCall);
  const makeNetTypeName(errType) protoError    = makeNetErrName(protoError);
  const makeNetTypeName(errType) progError     = makeNetErrName(progError);
  const makeNetTypeName(errType) resourceErr   = makeNetErrName(resourceErr);
  const makeNetTypeName(errType) timeOut       = makeNetErrName(timeOut);
  const makeNetTypeName(errType) paramError    = makeNetErrName(paramError);
  const makeNetTypeName(errType) authError     = makeNetErrName(authError);
  const makeNetTypeName(errType) addrError     = makeNetErrName(addrError);
  const makeNetTypeName(errType) dstError      = makeNetErrName(dstError);
  const makeNetTypeName(errType) badConn       = makeNetErrName(badConn);
  const makeNetTypeName(errType) netError      = makeNetErrName(netError);
  const makeNetTypeName(errType) badProto      = makeNetErrName(badProto);
  const makeNetTypeName(errType) badClose      = makeNetErrName(badClose);
  const makeNetTypeName(errType) fmtError      = makeNetErrName(fmtError);
  const makeNetTypeName(errType) dupError      = makeNetErrName(dupError);
  const makeNetTypeName(errType) sysError      = makeNetErrName(sysError);
  const makeNetTypeName(errType) libError      = makeNetErrName(libError);
  const makeNetTypeName(errType) opError       = makeNetErrName(opError);
  const makeNetTypeName(errType) rpcError      = makeNetErrName(rpcError);
  const makeNetTypeName(errType) notFound      = makeNetErrName(notFound);
  const makeNetTypeName(errType) Error_End     = makeNetErrName(Error_End);
  const makeNetTypeName(errType) etCount       = makeNetErrName(etCount);

  static inline bool isError(errType et);
  static inline bool isError(errType et) { return wun_isError(et); }


# define WUPP_MSG_STRING_LEN  WULOG_MSG_MAXLEN

  class errorBase {
    protected:
      wupp::errType   et_; // type or category of error
      wupp::errLevel  el_; // error level
      std::string    who_; // string identifying the source of an error
      std::string     lm_; // library/user generated message
      int             se_; // system errno value
      std::string     sm_; // message generated by system

    public:
      errorBase(wupp::errType et, wupp::errLevel el, const std::string& lm);
      errorBase(wupp::errType et, wupp::errLevel el, const std::string& lm, int err);
      errorBase(wupp::errType et = noError);
      errorBase(wupp::errType et, const std::string& lm);
      errorBase(wupp::errType et, const std::string& lm, int err);
      errorBase(wupp::errType et, const std::string& lm, int err, const std::string& sm);
      errorBase(wupp::errType et, const wupp::errInfo &einfo);
      virtual ~errorBase();

      void set_syserr(int syserr);

      /* for the std::exception interface */
      virtual const char* what() const {return lm_.c_str();}

      const wupp::errLevel  lvl() const {return el_;}
      const std::string&    who() const {return who_;}
      const std::string& libmsg() const {return lm_;}
      const std::string& sysmsg() const {return sm_;}
      int              syserrno() const {return se_;}
      wupp::errType       etype() const {return et_;}

      void logmsg() const;
      virtual std::ostream& print(std::ostream& os = std::cerr) const;
      virtual std::string toString() const;
  };
  std::ostream& operator<<(std::ostream& os, const errorBase& eb);
  std::ostream& operator<<(std::ostream& os, wupp::errLevel el);
  std::ostream& operator<<(std::ostream& os, wupp::errType et);
};

#endif
